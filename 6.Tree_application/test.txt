实验3 二叉树的建立与应用
【实验目的】
1. 熟练掌握树的基本概念、二叉树的特性、二叉树的基本操作及在链式存储结构上的实现。
2. 重点掌握二叉树的建立、遍历及求深度等算法。
3. 掌握二叉树的线索化及线索二叉树的遍历算法；掌握赫夫曼树的含义及其应用。
4. 掌握运用递归方式描述算法及编写递归C程序的方法，提高算法分析和程序设计能力。
【实验学时】 3学时
【问题描述】
二叉树采用二叉链表作存储结构，试编程实现二叉树的如下基本操作：
1. 按先序序列构造一棵二叉链表表示的二叉树T；
2. 对这棵二叉树进行遍历：先序、中序、后序以及层次遍历序列，分别输出结点的遍历序列；
3. 求二叉树的深度。
4.求叶子结点的个数。
要求设计一漂亮、实用的功能菜单，每个功能用一函数表示。
【测试数据】
1. 输入：#↙，建立一棵空树， 
先序、中序、后序遍历和层次遍历没有输出，树的深度输出为0；
叶子结点个数为；0。
2. 输入：A↙
先序、中序、后序遍历和层次遍历输出均为A；
深度输出为：1	；
叶子结点个数为：1
3. 输入：ABC##DE#G##F###↙，
先序输出为：    A B C D E G F
中序序列为：    C B E G D F A
后序序列为：    C G E F D B A
层次遍历输出为：A B C D E F G
深度输出为：    5  
叶子结点个数为：3                             
4. 输入：　　　　　ABD#GJ##K##E##C#FH##IL###↙，  
先序遍历输出为：A B D G J K E C F H I L
层次遍历输出为：A B C D E F G H I J K L	
中序序列为：    D J G K B E A C H F L I
后序序列为：    J K G D E B H L I F C A
深度输出为：    5
叶子结点个数为：5
 【说明】
1. 按先序次序输入二叉树中结点的值，用'#'表示空树，对每一个结点应当确定其左右子树的值（为空时必须用特定的空字符占位），故执行此程序时，最好先在纸上画出你想建立的二叉树，每个结点的左右子树必须确定，若为空，则用特定字符标出，然后再按先序输入这棵二叉树的字符序列；
2. 为了简化程序的书写量，以及程序的清晰性，对结点的访问以一条输出语句表示，若有更复杂的或多种访问，可以将结点的访问编写成函数，然后通过函数指针进行函数的调用。读者若有兴趣，可自行编写。
3. C语言函数参数传递，都是“传值”的方式，故在设计函数时，必须注意参数的传递，若想通过函数修改实际参数的值，必须对指针变量作参数。具体设计时，读者一定要把指针变量、指针变量指向的值等概念弄清楚；
4. 对于其他算法，请读者思考，自行编程完成，以加深学习体会。
【提高题】
 有能力的同学，可以继续完成下面2道题。
1. 按中序顺序建立一棵二叉树；
2. 用非递归方式遍历二叉树（先序、中序或后序），输出遍历序列。